// Fun√ß√£o verificarEstoque()
function verificarEstoque(nomeItem, quantidadeDisponivel, quantidadeSolicitada) {
    
    // Verifica se s√£o n√∫meros v√°lidos
    if (isNaN(quantidadeDisponivel) || isNaN(quantidadeSolicitada)) {
        return "Erro: Quantidades devem ser numeros inteiros.";
    }

    // Verifica disponibilidade
    if (quantidadeSolicitada > quantidadeDisponivel) {
        return "Estoque insuficiente";
    } else {
        return "Pedido realizado";
    }
}

// Lendo as entradas do usu√°rio
let nomeItem = gets();                       // string
let quantidadeDisponivel = parseInt(gets()); // inteiro
let quantidadeSolicitada = parseInt(gets()); // inteiro

// Chamando a fun√ß√£o e imprimindo o resultado
console.log(verificarEstoque(nomeItem, quantidadeDisponivel, quantidadeSolicitada));

/* Todas as entradas e sa√≠da dos algoritmos s√£o utilizados o STDIN e STDOUT de cada linguagem, abaixo tem algumas dicas de como utilizar cada STDIN e STDOUT de cada linguagem.
JavaScript

Em JavaScript as fun√ß√µes de STDIN e STDOUT respectivamente s√£o gets e console.log, a fun√ß√£o gets √© implementada internamente para auxiliar a entrada dos dados.

Exemplo:
let line = gets(); // L√™ a linha de entrada
console.log(line); // Imprime o dado

Java

Em Java existe v√°rias formas de implementar o STDIN e STDOUT recomendamos utilizar BufferedReader para o STDIN e o System.out.println para o STDOUT.

Exemplo:
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
StringTokenizer st = new StringTokenizer(br.readLine()); // L√™ a linha de entrada
int a = Integer.parseInt(st.nextToken());
System.out.println(a); // Imprime o dado

Python

Em Python existe v√°rias formas de implementar o STDIN e STDOUT recomendamos utilizar sys.stdin.readline para o STDIN e o print para o STDOUT.

Exemplo:
import sys
a = int(sys.stdin.readline()) // L√™ a linha de entrada
print(a); // Imprime o dado

Descri√ß√£o
O Mestre dos Magos tem uma loja de itens m√°gicos e precisa de um sistema para verificar o estoque antes de vender um item.  O programa deve receber o nome do item, a quantidade dispon√≠vel no estoque e a quantidade solicitada pelo cliente.

üõ†Ô∏è Requisitos T√©cnicos
‚úÖ Criar uma fun√ß√£o chamada verificarEstoque() que recebe tr√™s par√¢metros:

nomeItem (string)
quantidadeDisponivel (inteiro)
quantidadeSolicitada (inteiro)
A fun√ß√£o deve retornar uma string com a mensagem correspondente.
‚úÖ O programa deve garantir que os valores informados para quantidade sejam n√∫meros inteiros v√°lidos. Caso contr√°rio, deve exibir "Erro: Quantidades devem ser numeros inteiros."

Entrada
O programa recebe tr√™s entradas:

Nome do item (string) ‚Üí Nome do item m√°gico que o cliente deseja comprar.
Quantidade dispon√≠vel (inteiro) ‚Üí N√∫mero de unidades dispon√≠veis no estoque.
Quantidade solicitada (inteiro) ‚Üí N√∫mero de unidades que o cliente deseja comprar.
üí° Observa√ß√£o:

Caso o usu√°rio forne√ßa um valor inv√°lido para a quantidade (exemplo: uma palavra ao inv√©s de um n√∫mero), o programa deve exibir uma mensagem de erro.
Sa√≠da
Ap√≥s processar os dados, o programa deve imprimir uma √∫nica mensagem, que pode ser:

"Pedido realizado" ‚Üí Se houver estoque suficiente.
"Estoque insuficiente" ‚Üí Se n√£o houver estoque suficiente.
"Erro: Quantidades devem ser numeros inteiros." ‚Üí Se o usu√°rio inserir valores inv√°lidos para as quantidades.
Exemplos
A tabela abaixo apresenta exemplos com alguns dados de entrada e suas respectivas sa√≠das esperadas. Certifique-se de testar seu programa com esses exemplos e com outros casos poss√≠veis.

Entrada	Sa√≠da
Pocao de Cura
10
5

Pedido realizado
Bola de Cristal
3
5

Estoque insuficiente
Varinha Magica
sete
3

Erro: Quantidades devem ser numeros inteiros

Aten√ß√£o: √â extremamente importante que as entradas e sa√≠das sejam exatamente iguais √†s descritas na descri√ß√£o do desafio de c√≥digo.

Os desafios apresentados aqui t√™m como objetivo principal exercitar os conceitos aprendidos e proporcionar um primeiro contato com l√≥gica de programa√ß√£o. Caso n√£o tenha experi√™ncia em programa√ß√£o, utilize o template dispon√≠vel e preencha com os conceitos aprendidos. Para resetar o template, basta clicar em ‚ÄúRestart Code‚Äù.*/